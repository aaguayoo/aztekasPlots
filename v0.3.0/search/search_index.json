{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to aztekas Plot documentation \u00b6","title":"Inicio"},{"location":"#welcome-to-aztekas-plot-documentation","text":"","title":"Welcome to aztekas Plot documentation"},{"location":"api_reference/main/","text":"Aztekasplot Model. Plotter \u00b6 aztekasPlotter Class. Attributes: Name Type Description source str Path to the aztekas data output file. metric str Name of the space-time metric where the simulation was performed. Options: - 'Non-rel' ( Default ) - 'Minkowski' - 'Kerr-Schild' (If selected, a_spin must be defined.) a_spin float Float with value of black hole spin. 0 for Schwarzschild (horizon-penetrating) and != 0 for Kerr-Schild. 'Kerr-Schild' metric must be specified. Source code in aztekasPlot/main.pydataclass class Plotter : \"\"\"aztekasPlotter Class. Attributes: source (str): Path to the `aztekas` data output file. metric (str): Name of the space-time metric where the simulation was performed. Options: - `'Non-rel'` (**Default**) - `'Minkowski'` - `'Kerr-Schild'` (If selected, `a_spin` must be defined.) a_spin (float): Float with value of black hole spin. 0 for Schwarzschild (horizon-penetrating) and != 0 for Kerr-Schild. `'Kerr-Schild'` metric must be specified. \"\"\" source : str = None metric : str = \"Non-rel\" a_spin : float = None def __post_init_post_parse__ ( self ) -> None : \"\"\"Post init section.\"\"\" # Set number of dimensions file = self . source plot_dim = get_plot_dim ( file ) self . data_dict = get_data_dict ( file , plot_dim ) self . data_dict [ \"metric\" ] = self . metric if self . metric == \"Kerr-Schild\" and self . a_spin is None : raise ValueError ( \"a_spin must be set for Kerr-Schild metric\" ) self . data_dict [ \"a_spin\" ] = self . a_spin if plot_dim == 2 : self . data_dict = convert_to_plot_coordinates ( self . data_dict ) def __str__ ( self ): \"\"\"Model docstring.\"\"\" pass def __call_contour_methods ( self , cmap : str , cbar_extend : str , set_contour : bool , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Call contour methods. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" if set_contour : self . __set_contour ( contour_levels , contour_color , contour_linewidth , contour_style ) self . __set_contourf ( cmap , cbar_extend ) def __call_axis_methods ( self ) -> None : \"\"\"Call axis methods.\"\"\" self . set_axis () self . set_axis_labels () self . set_axis_ticks () def __set_colorbar_label ( self , cbar_label : str , labelpad : float , rotation : float ) -> None : \"\"\"Set colorbar. Parameters: ----------- cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. \"\"\" self . cbar . set_label ( cbar_label , labelpad = labelpad , rotation = rotation , fontsize = self . fontsize ) def __set_contour ( self , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Set contour plot. Parameters: ----------- contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" self . contour = self . ax . contour ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) if self . X2_reflect : self . contour = self . ax . contour ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) def __set_contourf ( self , cmap : str , cbar_extend : str ) -> None : \"\"\"Set contourf plot. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. \"\"\" self . contour = self . ax . contourf ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) if self . X2_reflect : self . contour = self . ax . contourf ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) def __set_LaTeX ( self ): \"\"\"Set LaTeX.\"\"\" matplotlib . rcParams [ \"text.usetex\" ] = True matplotlib . rcParams [ \"font.family\" ] = \"serif\" matplotlib . rcParams [ \"font.serif\" ] = [ \"Computer Modern Roman\" ] matplotlib . rcParams [ \"font.size\" ] = self . fontsize matplotlib . rcParams [ \"axes.labelsize\" ] = 12 matplotlib . rcParams [ \"axes.titlesize\" ] = 12 matplotlib . rcParams [ \"xtick.labelsize\" ] = 12 matplotlib . rcParams [ \"ytick.labelsize\" ] = 12 matplotlib . rcParams [ \"legend.fontsize\" ] = 12 def __set_plot_var ( self , plot_var : str , scale : str , plot_var_0 : float ) -> None : \"\"\"Set plot variable. Parameters: ----------- plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. \"\"\" self . __set_plot_var_0 ( plot_var_0 ) # Check if plot_var is set if plot_var in self . data_dict . keys (): self . plot_var = self . data_dict [ plot_var ] / self . plot_var_0 else : raise ValueError ( f \"plot_var { plot_var } is not in data_dict\" ) # Check scale if scale == \"log\" : if self . plot_var . min () <= 0 or self . plot_var . max () <= 0 : raise ValueError ( f \"plot_var { plot_var } has negative values. \" ) self . plot_var = np . log10 ( self . plot_var / self . plot_var_0 ) def __set_plot_var_0 ( self , plot_var_0 : float ) -> None : \"\"\"Set unit plot variable. Parameters: ----------- plot_var_0 [float]: Unit plot variable. \"\"\" if not plot_var_0 : self . plot_var_0 = 1.0 elif plot_var_0 == \"min\" : self . plot_var_0 = self . plot_var . min () elif plot_var_0 == \"max\" : self . plot_var_0 = self . plot_var . max () else : self . plot_var_0 = plot_var_0 def __set_xmin_and_xmax ( self , x1min : float , x1max : float , x2min : float , x2max : float ) -> None : \"\"\"Set xmin and xmax. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. \"\"\" self . x1min = self . data_dict [ \"X1\" ] . min () if x1min is None else x1min self . x1max = self . data_dict [ \"X1\" ] . max () if x1max is None else x1max self . x2min = self . data_dict [ \"X2\" ] . min () if x2min is None else x2min self . x2max = self . data_dict [ \"X2\" ] . max () if x2max is None else x2max def initialize_plot ( self , fig : object = None , ax : object = None , set_aspect : str = \"equal\" , LaTeX : bool = True , fontsize : int = 12 , figsize : Tuple = ( 10 , 8 ), ) -> None : \"\"\"Initialize plot. Parameters: ----------- fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. \"\"\" if fig or ax : self . fig , self . ax = fig , ax else : self . fig , self . ax = plt . subplots ( figsize = figsize ) # Set aspect ratio self . ax . set_aspect ( set_aspect ) # Set LaTeX if LaTeX : self . fontsize = fontsize self . __set_LaTeX () # Set axis self . __call_axis_methods () def get_contour_plot ( self , plot_var : str = None , plot_var_0 : float = None , scale : str = \"linear\" , cmap : str = \"viridis\" , cbar_extend : str = \"neither\" , cbar_min : float = None , cbar_max : float = None , cbar_levels : int = 400 , set_contour : bool = True , contour_levels : int = 20 , contour_color : str = \"black\" , contour_linewidth : float = 0.5 , contour_style : str = \"dashed\" , ) -> None : \"\"\"Get contour plot. Parameters: ----------- plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. \"\"\" self . __set_plot_var ( plot_var , scale , plot_var_0 ) # Get contour plot parameters if cbar_min is None : cbar_min = self . plot_var . min () if cbar_max is None : cbar_max = self . plot_var . max () self . cmap_levels = np . linspace ( cbar_min , cbar_max , cbar_levels ) self . cbar_min = cbar_min self . cbar_max = cbar_max self . __call_contour_methods ( cmap , cbar_extend , set_contour , contour_levels , contour_color , contour_linewidth , contour_style , ) def get_colorbar ( self , cbor : str = \"vertical\" , cbar_pad : float = 0.07 , cbar_decimals : int = 2 , n_ticks : int = 5 , bar_width : float = 3 , cbar_label : str = \"variable\" , labelpad : float = 20 , rotation : float = 270 , ) -> None : \"\"\"Get colorbar. Parameters: ----------- cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. \"\"\" self . cax = inset_axes ( self . ax , width = f \" { bar_width } %\" , height = \"100%\" , loc = \"lower right\" , bbox_to_anchor = ( cbar_pad , 0.0 , 1 , 1 ), bbox_transform = self . ax . transAxes , borderpad = 0 , ) self . cbar = self . fig . colorbar ( self . contour , orientation = cbor , cax = self . cax ) cbar_ticks = np . linspace ( self . cbar_min , self . cbar_max , num = n_ticks , ) self . cbar . set_ticks ( cbar_ticks ) self . cbar . ax . set_yticklabels ( [ f \" { cbar_tick : . { cbar_decimals } f } \" for cbar_tick in cbar_ticks ], fontsize = self . fontsize , ) self . __set_colorbar_label ( cbar_label , labelpad , rotation ) def get_streamlines ( self , stream_density : float or List [ float ] = None , stream_color : str = \"white\" , stream_linewidth : float = 0.5 , ) -> None : \"\"\"Get streamlines. Parameters: ----------- stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. \"\"\" sx1 = np . linspace ( self . x1min , self . x1max , self . data_dict [ \"Nx1\" ]) sx2 = np . linspace ( self . x2min , self . x2max , self . data_dict [ \"Nx2\" ]) sX1 , sX2 = np . meshgrid ( sx1 , sx2 ) px1 = self . data_dict [ \"X1\" ] . flatten () px2 = self . data_dict [ \"X2\" ] . flatten () pvX1 = self . data_dict [ \"vX1\" ] . flatten () pvX2 = self . data_dict [ \"vX2\" ] . flatten () gvX1 = griddata (( px1 , px2 ), pvX1 , ( sX1 , sX2 ), method = \"cubic\" ) gvX2 = griddata (( px1 , px2 ), pvX2 , ( sX1 , sX2 ), method = \"cubic\" ) if not stream_density : stream_density = [ 1.0 , self . data_dict [ \"Nx1\" ] / self . data_dict [ \"Nx2\" ]] self . ax . streamplot ( sx1 , sx2 , gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) if self . X2_reflect : self . ax . streamplot ( - sx1 , sx2 , - gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) def save_figure ( self , filename : str , dpi = 300 ) -> None : \"\"\"Save figure. Parameters: ----------- filename [str]: Filename. dpi [int]: DPI. \"\"\" self . fig . savefig ( filename , dpi = dpi , bbox_inches = \"tight\" ) def set_axis ( self , x1min = None , x1max = None , x2min = None , x2max = None , X2_reflect = False ) -> None : \"\"\"Set axis. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. \"\"\" self . X2_reflect = X2_reflect if self . X2_reflect and not x1min : x1min = - self . data_dict [ \"X1\" ] . max () self . __set_xmin_and_xmax ( x1min , x1max , x2min , x2max ) plt . xlim ( self . x1min , self . x1max ) plt . ylim ( self . x2min , self . x2max ) def set_axis_ticks ( self , x1_ticks : List = None , x2_ticks : List = None , x1_nticks : int = 5 , x2_nticks : int = 5 , x1_ticks_decimals : int = 0 , x2_ticks_decimals : int = 0 , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. \"\"\" if x1_nticks or x1_ticks_decimals : if not x1_ticks : x1_ticks = np . linspace ( self . x1min , self . x1max , num = x1_nticks , endpoint = True ) plt . xticks ( x1_ticks , [ f \" { x1_tick : . { x2_ticks_decimals } f } \" for x1_tick in x1_ticks ], fontsize = self . fontsize , ) else : plt . xticks ( x1_ticks , x1_ticks , fontsize = self . fontsize , ) if x2_nticks or x1_ticks_decimals : if not x2_ticks : x2_ticks = np . linspace ( self . x2min , self . x2max , num = x2_nticks , endpoint = True ) plt . yticks ( x2_ticks , [ f \" { x2_tick : . { x2_ticks_decimals } f } \" for x2_tick in x2_ticks ], fontsize = self . fontsize , ) else : plt . yticks ( x2_ticks , x2_ticks , fontsize = self . fontsize , ) def set_axis_labels ( self , x1_label : str = \"X\" , x2_label : str = \"Y\" , x1_units : str = \"\" , x2_units : str = \"\" , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. \"\"\" if x1_label : plt . xlabel ( f \" { x1_label } { x1_units } \" , fontsize = self . fontsize ) if x2_label : plt . ylabel ( f \" { x2_label } { x2_units } \" , fontsize = self . fontsize ) __call_axis_methods () \u00b6 Call axis methods. Source code in aztekasPlot/main.py 106 107 108 109 110 def __call_axis_methods ( self ) -> None : \"\"\"Call axis methods.\"\"\" self . set_axis () self . set_axis_labels () self . set_axis_ticks () __call_contour_methods ( cmap , cbar_extend , set_contour , contour_levels , contour_color , contour_linewidth , contour_style ) \u00b6 Call contour methods. cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. Source code in aztekasPlot/main.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def __call_contour_methods ( self , cmap : str , cbar_extend : str , set_contour : bool , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Call contour methods. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" if set_contour : self . __set_contour ( contour_levels , contour_color , contour_linewidth , contour_style ) self . __set_contourf ( cmap , cbar_extend ) __post_init_post_parse__ () \u00b6 Post init section. Source code in aztekasPlot/main.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __post_init_post_parse__ ( self ) -> None : \"\"\"Post init section.\"\"\" # Set number of dimensions file = self . source plot_dim = get_plot_dim ( file ) self . data_dict = get_data_dict ( file , plot_dim ) self . data_dict [ \"metric\" ] = self . metric if self . metric == \"Kerr-Schild\" and self . a_spin is None : raise ValueError ( \"a_spin must be set for Kerr-Schild metric\" ) self . data_dict [ \"a_spin\" ] = self . a_spin if plot_dim == 2 : self . data_dict = convert_to_plot_coordinates ( self . data_dict ) __set_LaTeX () \u00b6 Set LaTeX. Source code in aztekasPlot/main.py 204 205 206 207 208 209 210 211 212 213 214 def __set_LaTeX ( self ): \"\"\"Set LaTeX.\"\"\" matplotlib . rcParams [ \"text.usetex\" ] = True matplotlib . rcParams [ \"font.family\" ] = \"serif\" matplotlib . rcParams [ \"font.serif\" ] = [ \"Computer Modern Roman\" ] matplotlib . rcParams [ \"font.size\" ] = self . fontsize matplotlib . rcParams [ \"axes.labelsize\" ] = 12 matplotlib . rcParams [ \"axes.titlesize\" ] = 12 matplotlib . rcParams [ \"xtick.labelsize\" ] = 12 matplotlib . rcParams [ \"ytick.labelsize\" ] = 12 matplotlib . rcParams [ \"legend.fontsize\" ] = 12 __set_colorbar_label ( cbar_label , labelpad , rotation ) \u00b6 Set colorbar. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. Source code in aztekasPlot/main.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def __set_colorbar_label ( self , cbar_label : str , labelpad : float , rotation : float ) -> None : \"\"\"Set colorbar. Parameters: ----------- cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. \"\"\" self . cbar . set_label ( cbar_label , labelpad = labelpad , rotation = rotation , fontsize = self . fontsize ) __set_contour ( contour_levels , contour_color , contour_linewidth , contour_style ) \u00b6 Set contour plot. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. Source code in aztekasPlot/main.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __set_contour ( self , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Set contour plot. Parameters: ----------- contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" self . contour = self . ax . contour ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) if self . X2_reflect : self . contour = self . ax . contour ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) __set_contourf ( cmap , cbar_extend ) \u00b6 Set contourf plot. cmap [str]: Color map. cbar_extend [str]: Colorbar extend. Source code in aztekasPlot/main.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 def __set_contourf ( self , cmap : str , cbar_extend : str ) -> None : \"\"\"Set contourf plot. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. \"\"\" self . contour = self . ax . contourf ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) if self . X2_reflect : self . contour = self . ax . contourf ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) __set_plot_var ( plot_var , scale , plot_var_0 ) \u00b6 Set plot variable. plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. Source code in aztekasPlot/main.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def __set_plot_var ( self , plot_var : str , scale : str , plot_var_0 : float ) -> None : \"\"\"Set plot variable. Parameters: ----------- plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. \"\"\" self . __set_plot_var_0 ( plot_var_0 ) # Check if plot_var is set if plot_var in self . data_dict . keys (): self . plot_var = self . data_dict [ plot_var ] / self . plot_var_0 else : raise ValueError ( f \"plot_var { plot_var } is not in data_dict\" ) # Check scale if scale == \"log\" : if self . plot_var . min () <= 0 or self . plot_var . max () <= 0 : raise ValueError ( f \"plot_var { plot_var } has negative values. \" ) self . plot_var = np . log10 ( self . plot_var / self . plot_var_0 ) __set_plot_var_0 ( plot_var_0 ) \u00b6 Set unit plot variable. plot_var_0 [float]: Unit plot variable. Source code in aztekasPlot/main.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 def __set_plot_var_0 ( self , plot_var_0 : float ) -> None : \"\"\"Set unit plot variable. Parameters: ----------- plot_var_0 [float]: Unit plot variable. \"\"\" if not plot_var_0 : self . plot_var_0 = 1.0 elif plot_var_0 == \"min\" : self . plot_var_0 = self . plot_var . min () elif plot_var_0 == \"max\" : self . plot_var_0 = self . plot_var . max () else : self . plot_var_0 = plot_var_0 __set_xmin_and_xmax ( x1min , x1max , x2min , x2max ) \u00b6 Set xmin and xmax. x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. Source code in aztekasPlot/main.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def __set_xmin_and_xmax ( self , x1min : float , x1max : float , x2min : float , x2max : float ) -> None : \"\"\"Set xmin and xmax. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. \"\"\" self . x1min = self . data_dict [ \"X1\" ] . min () if x1min is None else x1min self . x1max = self . data_dict [ \"X1\" ] . max () if x1max is None else x1max self . x2min = self . data_dict [ \"X2\" ] . min () if x2min is None else x2min self . x2max = self . data_dict [ \"X2\" ] . max () if x2max is None else x2max __str__ () \u00b6 Model docstring. Source code in aztekasPlot/main.py 61 62 63 def __str__ ( self ): \"\"\"Model docstring.\"\"\" pass get_colorbar ( cbor = 'vertical' , cbar_pad = 0.07 , cbar_decimals = 2 , n_ticks = 5 , bar_width = 3 , cbar_label = 'variable' , labelpad = 20 , rotation = 270 ) \u00b6 Get colorbar. cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. Source code in aztekasPlot/main.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 def get_colorbar ( self , cbor : str = \"vertical\" , cbar_pad : float = 0.07 , cbar_decimals : int = 2 , n_ticks : int = 5 , bar_width : float = 3 , cbar_label : str = \"variable\" , labelpad : float = 20 , rotation : float = 270 , ) -> None : \"\"\"Get colorbar. Parameters: ----------- cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. \"\"\" self . cax = inset_axes ( self . ax , width = f \" { bar_width } %\" , height = \"100%\" , loc = \"lower right\" , bbox_to_anchor = ( cbar_pad , 0.0 , 1 , 1 ), bbox_transform = self . ax . transAxes , borderpad = 0 , ) self . cbar = self . fig . colorbar ( self . contour , orientation = cbor , cax = self . cax ) cbar_ticks = np . linspace ( self . cbar_min , self . cbar_max , num = n_ticks , ) self . cbar . set_ticks ( cbar_ticks ) self . cbar . ax . set_yticklabels ( [ f \" { cbar_tick : . { cbar_decimals } f } \" for cbar_tick in cbar_ticks ], fontsize = self . fontsize , ) self . __set_colorbar_label ( cbar_label , labelpad , rotation ) get_contour_plot ( plot_var = None , plot_var_0 = None , scale = 'linear' , cmap = 'viridis' , cbar_extend = 'neither' , cbar_min = None , cbar_max = None , cbar_levels = 400 , set_contour = True , contour_levels = 20 , contour_color = 'black' , contour_linewidth = 0.5 , contour_style = 'dashed' ) \u00b6 Get contour plot. plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. Source code in aztekasPlot/main.py 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def get_contour_plot ( self , plot_var : str = None , plot_var_0 : float = None , scale : str = \"linear\" , cmap : str = \"viridis\" , cbar_extend : str = \"neither\" , cbar_min : float = None , cbar_max : float = None , cbar_levels : int = 400 , set_contour : bool = True , contour_levels : int = 20 , contour_color : str = \"black\" , contour_linewidth : float = 0.5 , contour_style : str = \"dashed\" , ) -> None : \"\"\"Get contour plot. Parameters: ----------- plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. \"\"\" self . __set_plot_var ( plot_var , scale , plot_var_0 ) # Get contour plot parameters if cbar_min is None : cbar_min = self . plot_var . min () if cbar_max is None : cbar_max = self . plot_var . max () self . cmap_levels = np . linspace ( cbar_min , cbar_max , cbar_levels ) self . cbar_min = cbar_min self . cbar_max = cbar_max self . __call_contour_methods ( cmap , cbar_extend , set_contour , contour_levels , contour_color , contour_linewidth , contour_style , ) get_streamlines ( stream_density = None , stream_color = 'white' , stream_linewidth = 0.5 ) \u00b6 Get streamlines. stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. Source code in aztekasPlot/main.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 def get_streamlines ( self , stream_density : float or List [ float ] = None , stream_color : str = \"white\" , stream_linewidth : float = 0.5 , ) -> None : \"\"\"Get streamlines. Parameters: ----------- stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. \"\"\" sx1 = np . linspace ( self . x1min , self . x1max , self . data_dict [ \"Nx1\" ]) sx2 = np . linspace ( self . x2min , self . x2max , self . data_dict [ \"Nx2\" ]) sX1 , sX2 = np . meshgrid ( sx1 , sx2 ) px1 = self . data_dict [ \"X1\" ] . flatten () px2 = self . data_dict [ \"X2\" ] . flatten () pvX1 = self . data_dict [ \"vX1\" ] . flatten () pvX2 = self . data_dict [ \"vX2\" ] . flatten () gvX1 = griddata (( px1 , px2 ), pvX1 , ( sX1 , sX2 ), method = \"cubic\" ) gvX2 = griddata (( px1 , px2 ), pvX2 , ( sX1 , sX2 ), method = \"cubic\" ) if not stream_density : stream_density = [ 1.0 , self . data_dict [ \"Nx1\" ] / self . data_dict [ \"Nx2\" ]] self . ax . streamplot ( sx1 , sx2 , gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) if self . X2_reflect : self . ax . streamplot ( - sx1 , sx2 , - gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) initialize_plot ( fig = None , ax = None , set_aspect = 'equal' , LaTeX = True , fontsize = 12 , figsize = ( 10 , 8 )) \u00b6 Initialize plot. fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. Source code in aztekasPlot/main.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def initialize_plot ( self , fig : object = None , ax : object = None , set_aspect : str = \"equal\" , LaTeX : bool = True , fontsize : int = 12 , figsize : Tuple = ( 10 , 8 ), ) -> None : \"\"\"Initialize plot. Parameters: ----------- fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. \"\"\" if fig or ax : self . fig , self . ax = fig , ax else : self . fig , self . ax = plt . subplots ( figsize = figsize ) # Set aspect ratio self . ax . set_aspect ( set_aspect ) # Set LaTeX if LaTeX : self . fontsize = fontsize self . __set_LaTeX () # Set axis self . __call_axis_methods () save_figure ( filename , dpi = 300 ) \u00b6 Save figure. filename [str]: Filename. dpi [int]: DPI. Source code in aztekasPlot/main.py 494 495 496 497 498 499 500 501 502 503 504 505 def save_figure ( self , filename : str , dpi = 300 ) -> None : \"\"\"Save figure. Parameters: ----------- filename [str]: Filename. dpi [int]: DPI. \"\"\" self . fig . savefig ( filename , dpi = dpi , bbox_inches = \"tight\" ) set_axis ( x1min = None , x1max = None , x2min = None , x2max = None , X2_reflect = False ) \u00b6 Set axis. x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. Source code in aztekasPlot/main.py 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def set_axis ( self , x1min = None , x1max = None , x2min = None , x2max = None , X2_reflect = False ) -> None : \"\"\"Set axis. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. \"\"\" self . X2_reflect = X2_reflect if self . X2_reflect and not x1min : x1min = - self . data_dict [ \"X1\" ] . max () self . __set_xmin_and_xmax ( x1min , x1max , x2min , x2max ) plt . xlim ( self . x1min , self . x1max ) plt . ylim ( self . x2min , self . x2max ) set_axis_labels ( x1_label = 'X' , x2_label = 'Y' , x1_units = '' , x2_units = '' ) \u00b6 Set axis label. x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. Source code in aztekasPlot/main.py 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 def set_axis_labels ( self , x1_label : str = \"X\" , x2_label : str = \"Y\" , x1_units : str = \"\" , x2_units : str = \"\" , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. \"\"\" if x1_label : plt . xlabel ( f \" { x1_label } { x1_units } \" , fontsize = self . fontsize ) if x2_label : plt . ylabel ( f \" { x2_label } { x2_units } \" , fontsize = self . fontsize ) set_axis_ticks ( x1_ticks = None , x2_ticks = None , x1_nticks = 5 , x2_nticks = 5 , x1_ticks_decimals = 0 , x2_ticks_decimals = 0 ) \u00b6 Set axis label. x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. Source code in aztekasPlot/main.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 def set_axis_ticks ( self , x1_ticks : List = None , x2_ticks : List = None , x1_nticks : int = 5 , x2_nticks : int = 5 , x1_ticks_decimals : int = 0 , x2_ticks_decimals : int = 0 , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. \"\"\" if x1_nticks or x1_ticks_decimals : if not x1_ticks : x1_ticks = np . linspace ( self . x1min , self . x1max , num = x1_nticks , endpoint = True ) plt . xticks ( x1_ticks , [ f \" { x1_tick : . { x2_ticks_decimals } f } \" for x1_tick in x1_ticks ], fontsize = self . fontsize , ) else : plt . xticks ( x1_ticks , x1_ticks , fontsize = self . fontsize , ) if x2_nticks or x1_ticks_decimals : if not x2_ticks : x2_ticks = np . linspace ( self . x2min , self . x2max , num = x2_nticks , endpoint = True ) plt . yticks ( x2_ticks , [ f \" { x2_tick : . { x2_ticks_decimals } f } \" for x2_tick in x2_ticks ], fontsize = self . fontsize , ) else : plt . yticks ( x2_ticks , x2_ticks , fontsize = self . fontsize , )","title":"Main"},{"location":"api_reference/main/#aztekasPlot.main.Plotter","text":"aztekasPlotter Class. Attributes: Name Type Description source str Path to the aztekas data output file. metric str Name of the space-time metric where the simulation was performed. Options: - 'Non-rel' ( Default ) - 'Minkowski' - 'Kerr-Schild' (If selected, a_spin must be defined.) a_spin float Float with value of black hole spin. 0 for Schwarzschild (horizon-penetrating) and != 0 for Kerr-Schild. 'Kerr-Schild' metric must be specified. Source code in aztekasPlot/main.pydataclass class Plotter : \"\"\"aztekasPlotter Class. Attributes: source (str): Path to the `aztekas` data output file. metric (str): Name of the space-time metric where the simulation was performed. Options: - `'Non-rel'` (**Default**) - `'Minkowski'` - `'Kerr-Schild'` (If selected, `a_spin` must be defined.) a_spin (float): Float with value of black hole spin. 0 for Schwarzschild (horizon-penetrating) and != 0 for Kerr-Schild. `'Kerr-Schild'` metric must be specified. \"\"\" source : str = None metric : str = \"Non-rel\" a_spin : float = None def __post_init_post_parse__ ( self ) -> None : \"\"\"Post init section.\"\"\" # Set number of dimensions file = self . source plot_dim = get_plot_dim ( file ) self . data_dict = get_data_dict ( file , plot_dim ) self . data_dict [ \"metric\" ] = self . metric if self . metric == \"Kerr-Schild\" and self . a_spin is None : raise ValueError ( \"a_spin must be set for Kerr-Schild metric\" ) self . data_dict [ \"a_spin\" ] = self . a_spin if plot_dim == 2 : self . data_dict = convert_to_plot_coordinates ( self . data_dict ) def __str__ ( self ): \"\"\"Model docstring.\"\"\" pass def __call_contour_methods ( self , cmap : str , cbar_extend : str , set_contour : bool , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Call contour methods. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" if set_contour : self . __set_contour ( contour_levels , contour_color , contour_linewidth , contour_style ) self . __set_contourf ( cmap , cbar_extend ) def __call_axis_methods ( self ) -> None : \"\"\"Call axis methods.\"\"\" self . set_axis () self . set_axis_labels () self . set_axis_ticks () def __set_colorbar_label ( self , cbar_label : str , labelpad : float , rotation : float ) -> None : \"\"\"Set colorbar. Parameters: ----------- cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. \"\"\" self . cbar . set_label ( cbar_label , labelpad = labelpad , rotation = rotation , fontsize = self . fontsize ) def __set_contour ( self , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Set contour plot. Parameters: ----------- contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" self . contour = self . ax . contour ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) if self . X2_reflect : self . contour = self . ax . contour ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) def __set_contourf ( self , cmap : str , cbar_extend : str ) -> None : \"\"\"Set contourf plot. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. \"\"\" self . contour = self . ax . contourf ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) if self . X2_reflect : self . contour = self . ax . contourf ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) def __set_LaTeX ( self ): \"\"\"Set LaTeX.\"\"\" matplotlib . rcParams [ \"text.usetex\" ] = True matplotlib . rcParams [ \"font.family\" ] = \"serif\" matplotlib . rcParams [ \"font.serif\" ] = [ \"Computer Modern Roman\" ] matplotlib . rcParams [ \"font.size\" ] = self . fontsize matplotlib . rcParams [ \"axes.labelsize\" ] = 12 matplotlib . rcParams [ \"axes.titlesize\" ] = 12 matplotlib . rcParams [ \"xtick.labelsize\" ] = 12 matplotlib . rcParams [ \"ytick.labelsize\" ] = 12 matplotlib . rcParams [ \"legend.fontsize\" ] = 12 def __set_plot_var ( self , plot_var : str , scale : str , plot_var_0 : float ) -> None : \"\"\"Set plot variable. Parameters: ----------- plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. \"\"\" self . __set_plot_var_0 ( plot_var_0 ) # Check if plot_var is set if plot_var in self . data_dict . keys (): self . plot_var = self . data_dict [ plot_var ] / self . plot_var_0 else : raise ValueError ( f \"plot_var { plot_var } is not in data_dict\" ) # Check scale if scale == \"log\" : if self . plot_var . min () <= 0 or self . plot_var . max () <= 0 : raise ValueError ( f \"plot_var { plot_var } has negative values. \" ) self . plot_var = np . log10 ( self . plot_var / self . plot_var_0 ) def __set_plot_var_0 ( self , plot_var_0 : float ) -> None : \"\"\"Set unit plot variable. Parameters: ----------- plot_var_0 [float]: Unit plot variable. \"\"\" if not plot_var_0 : self . plot_var_0 = 1.0 elif plot_var_0 == \"min\" : self . plot_var_0 = self . plot_var . min () elif plot_var_0 == \"max\" : self . plot_var_0 = self . plot_var . max () else : self . plot_var_0 = plot_var_0 def __set_xmin_and_xmax ( self , x1min : float , x1max : float , x2min : float , x2max : float ) -> None : \"\"\"Set xmin and xmax. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. \"\"\" self . x1min = self . data_dict [ \"X1\" ] . min () if x1min is None else x1min self . x1max = self . data_dict [ \"X1\" ] . max () if x1max is None else x1max self . x2min = self . data_dict [ \"X2\" ] . min () if x2min is None else x2min self . x2max = self . data_dict [ \"X2\" ] . max () if x2max is None else x2max def initialize_plot ( self , fig : object = None , ax : object = None , set_aspect : str = \"equal\" , LaTeX : bool = True , fontsize : int = 12 , figsize : Tuple = ( 10 , 8 ), ) -> None : \"\"\"Initialize plot. Parameters: ----------- fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. \"\"\" if fig or ax : self . fig , self . ax = fig , ax else : self . fig , self . ax = plt . subplots ( figsize = figsize ) # Set aspect ratio self . ax . set_aspect ( set_aspect ) # Set LaTeX if LaTeX : self . fontsize = fontsize self . __set_LaTeX () # Set axis self . __call_axis_methods () def get_contour_plot ( self , plot_var : str = None , plot_var_0 : float = None , scale : str = \"linear\" , cmap : str = \"viridis\" , cbar_extend : str = \"neither\" , cbar_min : float = None , cbar_max : float = None , cbar_levels : int = 400 , set_contour : bool = True , contour_levels : int = 20 , contour_color : str = \"black\" , contour_linewidth : float = 0.5 , contour_style : str = \"dashed\" , ) -> None : \"\"\"Get contour plot. Parameters: ----------- plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. \"\"\" self . __set_plot_var ( plot_var , scale , plot_var_0 ) # Get contour plot parameters if cbar_min is None : cbar_min = self . plot_var . min () if cbar_max is None : cbar_max = self . plot_var . max () self . cmap_levels = np . linspace ( cbar_min , cbar_max , cbar_levels ) self . cbar_min = cbar_min self . cbar_max = cbar_max self . __call_contour_methods ( cmap , cbar_extend , set_contour , contour_levels , contour_color , contour_linewidth , contour_style , ) def get_colorbar ( self , cbor : str = \"vertical\" , cbar_pad : float = 0.07 , cbar_decimals : int = 2 , n_ticks : int = 5 , bar_width : float = 3 , cbar_label : str = \"variable\" , labelpad : float = 20 , rotation : float = 270 , ) -> None : \"\"\"Get colorbar. Parameters: ----------- cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. \"\"\" self . cax = inset_axes ( self . ax , width = f \" { bar_width } %\" , height = \"100%\" , loc = \"lower right\" , bbox_to_anchor = ( cbar_pad , 0.0 , 1 , 1 ), bbox_transform = self . ax . transAxes , borderpad = 0 , ) self . cbar = self . fig . colorbar ( self . contour , orientation = cbor , cax = self . cax ) cbar_ticks = np . linspace ( self . cbar_min , self . cbar_max , num = n_ticks , ) self . cbar . set_ticks ( cbar_ticks ) self . cbar . ax . set_yticklabels ( [ f \" { cbar_tick : . { cbar_decimals } f } \" for cbar_tick in cbar_ticks ], fontsize = self . fontsize , ) self . __set_colorbar_label ( cbar_label , labelpad , rotation ) def get_streamlines ( self , stream_density : float or List [ float ] = None , stream_color : str = \"white\" , stream_linewidth : float = 0.5 , ) -> None : \"\"\"Get streamlines. Parameters: ----------- stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. \"\"\" sx1 = np . linspace ( self . x1min , self . x1max , self . data_dict [ \"Nx1\" ]) sx2 = np . linspace ( self . x2min , self . x2max , self . data_dict [ \"Nx2\" ]) sX1 , sX2 = np . meshgrid ( sx1 , sx2 ) px1 = self . data_dict [ \"X1\" ] . flatten () px2 = self . data_dict [ \"X2\" ] . flatten () pvX1 = self . data_dict [ \"vX1\" ] . flatten () pvX2 = self . data_dict [ \"vX2\" ] . flatten () gvX1 = griddata (( px1 , px2 ), pvX1 , ( sX1 , sX2 ), method = \"cubic\" ) gvX2 = griddata (( px1 , px2 ), pvX2 , ( sX1 , sX2 ), method = \"cubic\" ) if not stream_density : stream_density = [ 1.0 , self . data_dict [ \"Nx1\" ] / self . data_dict [ \"Nx2\" ]] self . ax . streamplot ( sx1 , sx2 , gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) if self . X2_reflect : self . ax . streamplot ( - sx1 , sx2 , - gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) def save_figure ( self , filename : str , dpi = 300 ) -> None : \"\"\"Save figure. Parameters: ----------- filename [str]: Filename. dpi [int]: DPI. \"\"\" self . fig . savefig ( filename , dpi = dpi , bbox_inches = \"tight\" ) def set_axis ( self , x1min = None , x1max = None , x2min = None , x2max = None , X2_reflect = False ) -> None : \"\"\"Set axis. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. \"\"\" self . X2_reflect = X2_reflect if self . X2_reflect and not x1min : x1min = - self . data_dict [ \"X1\" ] . max () self . __set_xmin_and_xmax ( x1min , x1max , x2min , x2max ) plt . xlim ( self . x1min , self . x1max ) plt . ylim ( self . x2min , self . x2max ) def set_axis_ticks ( self , x1_ticks : List = None , x2_ticks : List = None , x1_nticks : int = 5 , x2_nticks : int = 5 , x1_ticks_decimals : int = 0 , x2_ticks_decimals : int = 0 , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. \"\"\" if x1_nticks or x1_ticks_decimals : if not x1_ticks : x1_ticks = np . linspace ( self . x1min , self . x1max , num = x1_nticks , endpoint = True ) plt . xticks ( x1_ticks , [ f \" { x1_tick : . { x2_ticks_decimals } f } \" for x1_tick in x1_ticks ], fontsize = self . fontsize , ) else : plt . xticks ( x1_ticks , x1_ticks , fontsize = self . fontsize , ) if x2_nticks or x1_ticks_decimals : if not x2_ticks : x2_ticks = np . linspace ( self . x2min , self . x2max , num = x2_nticks , endpoint = True ) plt . yticks ( x2_ticks , [ f \" { x2_tick : . { x2_ticks_decimals } f } \" for x2_tick in x2_ticks ], fontsize = self . fontsize , ) else : plt . yticks ( x2_ticks , x2_ticks , fontsize = self . fontsize , ) def set_axis_labels ( self , x1_label : str = \"X\" , x2_label : str = \"Y\" , x1_units : str = \"\" , x2_units : str = \"\" , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. \"\"\" if x1_label : plt . xlabel ( f \" { x1_label } { x1_units } \" , fontsize = self . fontsize ) if x2_label : plt . ylabel ( f \" { x2_label } { x2_units } \" , fontsize = self . fontsize )","title":"Plotter"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__call_axis_methods","text":"Call axis methods. Source code in aztekasPlot/main.py 106 107 108 109 110 def __call_axis_methods ( self ) -> None : \"\"\"Call axis methods.\"\"\" self . set_axis () self . set_axis_labels () self . set_axis_ticks ()","title":"__call_axis_methods()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__call_contour_methods","text":"Call contour methods. cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. Source code in aztekasPlot/main.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def __call_contour_methods ( self , cmap : str , cbar_extend : str , set_contour : bool , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Call contour methods. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. set_contour [bool]: Set contour. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" if set_contour : self . __set_contour ( contour_levels , contour_color , contour_linewidth , contour_style ) self . __set_contourf ( cmap , cbar_extend )","title":"__call_contour_methods()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__post_init_post_parse__","text":"Post init section. Source code in aztekasPlot/main.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __post_init_post_parse__ ( self ) -> None : \"\"\"Post init section.\"\"\" # Set number of dimensions file = self . source plot_dim = get_plot_dim ( file ) self . data_dict = get_data_dict ( file , plot_dim ) self . data_dict [ \"metric\" ] = self . metric if self . metric == \"Kerr-Schild\" and self . a_spin is None : raise ValueError ( \"a_spin must be set for Kerr-Schild metric\" ) self . data_dict [ \"a_spin\" ] = self . a_spin if plot_dim == 2 : self . data_dict = convert_to_plot_coordinates ( self . data_dict )","title":"__post_init_post_parse__()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_LaTeX","text":"Set LaTeX. Source code in aztekasPlot/main.py 204 205 206 207 208 209 210 211 212 213 214 def __set_LaTeX ( self ): \"\"\"Set LaTeX.\"\"\" matplotlib . rcParams [ \"text.usetex\" ] = True matplotlib . rcParams [ \"font.family\" ] = \"serif\" matplotlib . rcParams [ \"font.serif\" ] = [ \"Computer Modern Roman\" ] matplotlib . rcParams [ \"font.size\" ] = self . fontsize matplotlib . rcParams [ \"axes.labelsize\" ] = 12 matplotlib . rcParams [ \"axes.titlesize\" ] = 12 matplotlib . rcParams [ \"xtick.labelsize\" ] = 12 matplotlib . rcParams [ \"ytick.labelsize\" ] = 12 matplotlib . rcParams [ \"legend.fontsize\" ] = 12","title":"__set_LaTeX()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_colorbar_label","text":"Set colorbar. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. Source code in aztekasPlot/main.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def __set_colorbar_label ( self , cbar_label : str , labelpad : float , rotation : float ) -> None : \"\"\"Set colorbar. Parameters: ----------- cbar_label [str]: Colorbar label. labelpad [float]: Colorbar labelpad. rotation [float]: Colorbar label rotation. \"\"\" self . cbar . set_label ( cbar_label , labelpad = labelpad , rotation = rotation , fontsize = self . fontsize )","title":"__set_colorbar_label()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_contour","text":"Set contour plot. contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. Source code in aztekasPlot/main.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __set_contour ( self , contour_levels : int , contour_color : str , contour_linewidth : float , contour_style : str , ) -> None : \"\"\"Set contour plot. Parameters: ----------- contour_levels [int]: Contour levels. contour_color [str]: Contour color. contour_linewidth [float]: Contour linewidth. contour_style [str]: Contour style. \"\"\" self . contour = self . ax . contour ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , ) if self . X2_reflect : self . contour = self . ax . contour ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , colors = contour_color , linewidths = contour_linewidth , levels = contour_levels , linestyles = contour_style , )","title":"__set_contour()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_contourf","text":"Set contourf plot. cmap [str]: Color map. cbar_extend [str]: Colorbar extend. Source code in aztekasPlot/main.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 def __set_contourf ( self , cmap : str , cbar_extend : str ) -> None : \"\"\"Set contourf plot. Parameters: ----------- cmap [str]: Color map. cbar_extend [str]: Colorbar extend. \"\"\" self . contour = self . ax . contourf ( self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , ) if self . X2_reflect : self . contour = self . ax . contourf ( - self . data_dict [ \"X1\" ], self . data_dict [ \"X2\" ], self . plot_var , cmap = cmap , levels = self . cmap_levels , extend = cbar_extend , )","title":"__set_contourf()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_plot_var","text":"Set plot variable. plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. Source code in aztekasPlot/main.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def __set_plot_var ( self , plot_var : str , scale : str , plot_var_0 : float ) -> None : \"\"\"Set plot variable. Parameters: ----------- plot_var [str]: Plot variable. scale [str]: Plot variable scale. plot_var_0 [float]: Unit plot variable. \"\"\" self . __set_plot_var_0 ( plot_var_0 ) # Check if plot_var is set if plot_var in self . data_dict . keys (): self . plot_var = self . data_dict [ plot_var ] / self . plot_var_0 else : raise ValueError ( f \"plot_var { plot_var } is not in data_dict\" ) # Check scale if scale == \"log\" : if self . plot_var . min () <= 0 or self . plot_var . max () <= 0 : raise ValueError ( f \"plot_var { plot_var } has negative values. \" ) self . plot_var = np . log10 ( self . plot_var / self . plot_var_0 )","title":"__set_plot_var()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_plot_var_0","text":"Set unit plot variable. plot_var_0 [float]: Unit plot variable. Source code in aztekasPlot/main.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 def __set_plot_var_0 ( self , plot_var_0 : float ) -> None : \"\"\"Set unit plot variable. Parameters: ----------- plot_var_0 [float]: Unit plot variable. \"\"\" if not plot_var_0 : self . plot_var_0 = 1.0 elif plot_var_0 == \"min\" : self . plot_var_0 = self . plot_var . min () elif plot_var_0 == \"max\" : self . plot_var_0 = self . plot_var . max () else : self . plot_var_0 = plot_var_0","title":"__set_plot_var_0()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__set_xmin_and_xmax","text":"Set xmin and xmax. x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. Source code in aztekasPlot/main.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def __set_xmin_and_xmax ( self , x1min : float , x1max : float , x2min : float , x2max : float ) -> None : \"\"\"Set xmin and xmax. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. \"\"\" self . x1min = self . data_dict [ \"X1\" ] . min () if x1min is None else x1min self . x1max = self . data_dict [ \"X1\" ] . max () if x1max is None else x1max self . x2min = self . data_dict [ \"X2\" ] . min () if x2min is None else x2min self . x2max = self . data_dict [ \"X2\" ] . max () if x2max is None else x2max","title":"__set_xmin_and_xmax()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.__str__","text":"Model docstring. Source code in aztekasPlot/main.py 61 62 63 def __str__ ( self ): \"\"\"Model docstring.\"\"\" pass","title":"__str__()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.get_colorbar","text":"Get colorbar. cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. Source code in aztekasPlot/main.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 def get_colorbar ( self , cbor : str = \"vertical\" , cbar_pad : float = 0.07 , cbar_decimals : int = 2 , n_ticks : int = 5 , bar_width : float = 3 , cbar_label : str = \"variable\" , labelpad : float = 20 , rotation : float = 270 , ) -> None : \"\"\"Get colorbar. Parameters: ----------- cbor [str]: Colorbar orientation. cbar_pad [float]: Colorbar pad. cbar_decimals [int]: Colorbar decimals. n_ticks [int]: Number of ticks. bar_width [float]: Colorbar width. cbar_label [str]: Colorbar label. labelpad [float]: Colorbar label pad. rotation [float]: Colorbar label rotation. \"\"\" self . cax = inset_axes ( self . ax , width = f \" { bar_width } %\" , height = \"100%\" , loc = \"lower right\" , bbox_to_anchor = ( cbar_pad , 0.0 , 1 , 1 ), bbox_transform = self . ax . transAxes , borderpad = 0 , ) self . cbar = self . fig . colorbar ( self . contour , orientation = cbor , cax = self . cax ) cbar_ticks = np . linspace ( self . cbar_min , self . cbar_max , num = n_ticks , ) self . cbar . set_ticks ( cbar_ticks ) self . cbar . ax . set_yticklabels ( [ f \" { cbar_tick : . { cbar_decimals } f } \" for cbar_tick in cbar_ticks ], fontsize = self . fontsize , ) self . __set_colorbar_label ( cbar_label , labelpad , rotation )","title":"get_colorbar()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.get_contour_plot","text":"Get contour plot. plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. Source code in aztekasPlot/main.py 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def get_contour_plot ( self , plot_var : str = None , plot_var_0 : float = None , scale : str = \"linear\" , cmap : str = \"viridis\" , cbar_extend : str = \"neither\" , cbar_min : float = None , cbar_max : float = None , cbar_levels : int = 400 , set_contour : bool = True , contour_levels : int = 20 , contour_color : str = \"black\" , contour_linewidth : float = 0.5 , contour_style : str = \"dashed\" , ) -> None : \"\"\"Get contour plot. Parameters: ----------- plot_var [str]: Variable to plot. contour_plot_dict [dict]: Contour plot dictionary. \"\"\" self . __set_plot_var ( plot_var , scale , plot_var_0 ) # Get contour plot parameters if cbar_min is None : cbar_min = self . plot_var . min () if cbar_max is None : cbar_max = self . plot_var . max () self . cmap_levels = np . linspace ( cbar_min , cbar_max , cbar_levels ) self . cbar_min = cbar_min self . cbar_max = cbar_max self . __call_contour_methods ( cmap , cbar_extend , set_contour , contour_levels , contour_color , contour_linewidth , contour_style , )","title":"get_contour_plot()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.get_streamlines","text":"Get streamlines. stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. Source code in aztekasPlot/main.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 def get_streamlines ( self , stream_density : float or List [ float ] = None , stream_color : str = \"white\" , stream_linewidth : float = 0.5 , ) -> None : \"\"\"Get streamlines. Parameters: ----------- stream_density [float or List[float]]: Stream density. stream_color [str]: Stream color. stream_linewidth [float]: Stream linewidth. \"\"\" sx1 = np . linspace ( self . x1min , self . x1max , self . data_dict [ \"Nx1\" ]) sx2 = np . linspace ( self . x2min , self . x2max , self . data_dict [ \"Nx2\" ]) sX1 , sX2 = np . meshgrid ( sx1 , sx2 ) px1 = self . data_dict [ \"X1\" ] . flatten () px2 = self . data_dict [ \"X2\" ] . flatten () pvX1 = self . data_dict [ \"vX1\" ] . flatten () pvX2 = self . data_dict [ \"vX2\" ] . flatten () gvX1 = griddata (( px1 , px2 ), pvX1 , ( sX1 , sX2 ), method = \"cubic\" ) gvX2 = griddata (( px1 , px2 ), pvX2 , ( sX1 , sX2 ), method = \"cubic\" ) if not stream_density : stream_density = [ 1.0 , self . data_dict [ \"Nx1\" ] / self . data_dict [ \"Nx2\" ]] self . ax . streamplot ( sx1 , sx2 , gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , ) if self . X2_reflect : self . ax . streamplot ( - sx1 , sx2 , - gvX1 , gvX2 , density = stream_density , color = stream_color , linewidth = stream_linewidth , )","title":"get_streamlines()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.initialize_plot","text":"Initialize plot. fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. Source code in aztekasPlot/main.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def initialize_plot ( self , fig : object = None , ax : object = None , set_aspect : str = \"equal\" , LaTeX : bool = True , fontsize : int = 12 , figsize : Tuple = ( 10 , 8 ), ) -> None : \"\"\"Initialize plot. Parameters: ----------- fig [object]: Figure object. ax [object]: Axis object. set_aspect [str]: Set aspect ratio. LaTeX [bool]: Use LaTeX. figsize [Tuple]: Figure size. \"\"\" if fig or ax : self . fig , self . ax = fig , ax else : self . fig , self . ax = plt . subplots ( figsize = figsize ) # Set aspect ratio self . ax . set_aspect ( set_aspect ) # Set LaTeX if LaTeX : self . fontsize = fontsize self . __set_LaTeX () # Set axis self . __call_axis_methods ()","title":"initialize_plot()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.save_figure","text":"Save figure. filename [str]: Filename. dpi [int]: DPI. Source code in aztekasPlot/main.py 494 495 496 497 498 499 500 501 502 503 504 505 def save_figure ( self , filename : str , dpi = 300 ) -> None : \"\"\"Save figure. Parameters: ----------- filename [str]: Filename. dpi [int]: DPI. \"\"\" self . fig . savefig ( filename , dpi = dpi , bbox_inches = \"tight\" )","title":"save_figure()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.set_axis","text":"Set axis. x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. Source code in aztekasPlot/main.py 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def set_axis ( self , x1min = None , x1max = None , x2min = None , x2max = None , X2_reflect = False ) -> None : \"\"\"Set axis. Parameters: ----------- x1min [float]: Minimum value for x1. x1max [float]: Maximum value for x1. x2min [float]: Minimum value for x2. x2max [float]: Maximum value for x2. X2_reflect [bool]: Reflect x2. \"\"\" self . X2_reflect = X2_reflect if self . X2_reflect and not x1min : x1min = - self . data_dict [ \"X1\" ] . max () self . __set_xmin_and_xmax ( x1min , x1max , x2min , x2max ) plt . xlim ( self . x1min , self . x1max ) plt . ylim ( self . x2min , self . x2max )","title":"set_axis()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.set_axis_labels","text":"Set axis label. x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. Source code in aztekasPlot/main.py 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 def set_axis_labels ( self , x1_label : str = \"X\" , x2_label : str = \"Y\" , x1_units : str = \"\" , x2_units : str = \"\" , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_label [str]: Label for x1. x2_label [str]: Label for x2. x1_units [str]: Units for x1. x2_units [str]: Units for x2. \"\"\" if x1_label : plt . xlabel ( f \" { x1_label } { x1_units } \" , fontsize = self . fontsize ) if x2_label : plt . ylabel ( f \" { x2_label } { x2_units } \" , fontsize = self . fontsize )","title":"set_axis_labels()"},{"location":"api_reference/main/#aztekasPlot.main.Plotter.set_axis_ticks","text":"Set axis label. x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. Source code in aztekasPlot/main.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 def set_axis_ticks ( self , x1_ticks : List = None , x2_ticks : List = None , x1_nticks : int = 5 , x2_nticks : int = 5 , x1_ticks_decimals : int = 0 , x2_ticks_decimals : int = 0 , ) -> None : \"\"\"Set axis label. Parameters: ----------- x1_ticks [List]: List of x1 ticks. x2_ticks [List]: List of x2 ticks. x1_nticks [int]: Number of x1 ticks. x2_nticks [int]: Number of x2 ticks. x1_ticks_decimals [int]: Number of x1 ticks decimals. x2_ticks_decimals [int]: Number of x2 ticks decimals. \"\"\" if x1_nticks or x1_ticks_decimals : if not x1_ticks : x1_ticks = np . linspace ( self . x1min , self . x1max , num = x1_nticks , endpoint = True ) plt . xticks ( x1_ticks , [ f \" { x1_tick : . { x2_ticks_decimals } f } \" for x1_tick in x1_ticks ], fontsize = self . fontsize , ) else : plt . xticks ( x1_ticks , x1_ticks , fontsize = self . fontsize , ) if x2_nticks or x1_ticks_decimals : if not x2_ticks : x2_ticks = np . linspace ( self . x2min , self . x2max , num = x2_nticks , endpoint = True ) plt . yticks ( x2_ticks , [ f \" { x2_tick : . { x2_ticks_decimals } f } \" for x2_tick in x2_ticks ], fontsize = self . fontsize , ) else : plt . yticks ( x2_ticks , x2_ticks , fontsize = self . fontsize , )","title":"set_axis_ticks()"}]}